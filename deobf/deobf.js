

let giggernigger = [
    "then",
    "mon-va.byteoversea.com",
    "setContextAtReq",
    "Futura",
    "fmp",
    "number",
    "l",
    "common",
    "setUserMode",
    "splice",
    "&store=1",
    "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*",
    "$1",
    "03-",
    "content",
    "keys",
    "monospace",
    " but was: ",
    "md5",
    "satisfying_threshold",
    "entry",
    "bytes",
    "wait",
    "getBatchData",
    "children",
    "##",
    "[object Number]",
    "offsetHeight",
    "asgw",
    "createBrowserConfigManager",
    "configHolder",
    "span",
    "X-Gnarly",
    "fontSize",
    "X-Bogus",
    "pcRej",
    "rules",
    "viewId",
    "MONITOR_WEB_ID",
    "rule",
    "renderType",
    "disconnect",
    "wrapFetch",
    "webkitConnection",
    "getServerConfig",
    "Tw Cen MT",
    "_start",
    "slardarErrs",
    "path",
    "Slardar",
    "r",
    "pushState",
    "webkitRTCPeerConnection",
    "exec",
    "@@iterator",
    "http",
    "REPORT_DOMAIN",
    "unload_0",
    "{",
    "https://lf16-cdn-tos.tiktokcdn-us.com/obj/static-tx/slardar/fe/sdk-web/plugins/",
    "first-paint",
    "breadcrumb",
    "sort",
    "onchange",
    "[loader].applyPlugin not found",
    "plugins.",
    "lastChanceUrl",
    "values",
    "parse",
    "WebMssdk ERROR! [2] When slardarConfig.enableLazyload is false, slardarConfig.settingLocation must be one of ",
    "getGlobalInstance",
    "userConfigNormalizer",
    "WebMssdk ERROR! [3] When slardarConfig.enableLazyload is true, slardarConfig.settingLocation must be one of ",
    "Arguments",
    "longtask",
    "utf8",
    "[object Function]",
    "oKeyPad",
    "setRequestHeader",
    "time",
    "longtask_0",
    "routeMode",
    "substr",
    "clearResourceTimings",
    "resourceError",
    "d",
    "Parchment",
    "indexOf",
    "some",
    "effectiveSampleRate",
    "window._mssdk.cacheOpts[aid] has not bee initialized yet!!!!",
    "is_custom_error",
    "; expires=",
    "last",
    ": ",
    "getOwnPropertySymbols",
    "Trebuchet MS",
    "reduce",
    "categories",
    "plugins",
    "visibilitychange",
    "apdex_detail",
    "=; expires=Mon, 20 Sep 2010 00:00:00 UTC; path=/;",
    "pp",
    "fetch_0",
    "cacheOpts",
    "getDefaultSessionId",
    "domain",
    "cannot provide ",
    "/",
    "EXTRA_INDEPENDENT_PLUGINS",
    "beforeunload",
    "loadPlugins",
    "version",
    "isSignalComplete",
    "Constantia",
    "resultCode",
    "Object",
    "getReferer",
    "pid",
    "user_id",
    "onicegatheringstatechange",
    "CordiaUPC",
    "unload",
    "getPluginFromRegistry",
    "innerHTML",
    "getEndpoint",
    "boe",
    "POST",
    "blank_screen",
    "reject",
    "createDataChannel",
    "__1479382789__",
    "browserBuilder",
    "replace",
    "src",
    "stream finishing",
    "s",
    "srcElement",
    "object",
    "payload",
    "readystatechange",
    "getResponseText",
    "traceparent",
    "sendBeacon",
    "Arial Hebrew",
    "stream finished",
    "pagehide",
    "head",
    "responseEnd",
    "user_set",
    "Malformed string",
    "m",
    "replaceState",
    "ev_type",
    "msCrypto",
    "https://sf16-website-login.neutral.ttwstatic.com/obj/tiktok_web_login_static/slardar/fe/sdk-web/plugins",
    "off",
    "Segoe UI",
    "expires",
    "extractPid",
    "field",
    "last_page",
    "close",
    "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
    "getBoundingClientRect",
    "PLUGINS_LOAD_PREFIX",
    "value",
    "sessionStorage",
    "finalized",
    "setup",
    "location",
    "Leelawadee",
    "forEach",
    "getConsumeStored",
    "tearDown",
    "trace",
    "\\$1",
    "IrisUPC",
    "constructor",
    "filename",
    "invalid block type",
    "construct",
    "top",
    "connection",
    "https://sf16-short-va.bytedapm.com/slardar/fe/sdk-web/plugins",
    "MONITOR_DEVICE_ID",
    "SLARDAR",
    ";",
    "DOMContentLoaded",
    "TimeCalibrationPlugin",
    "vivobrowser",
    "slardarDomain",
    "isView",
    "subarray",
    "\\/monitor_web\\/collect|\\/monitor_browser\\/collect\\/batch",
    "name",
    "base64",
    "sample_rate",
    "no callback",
    "prod",
    "perf",
    "META",
    "first-contentful-paint",
    "[loader].applyPlugin failed",
    "fail",
    "finalize",
    "'",
    "[object Exception]",
    "p_count",
    "return",
    "createMinimalBrowserClient",
    "Network request aborted",
    "navigationStart",
    "mon-va.lemon8-app.com",
    "video",
    "data",
    "setLocalDescription",
    "SETTINGS_DOMAIN",
    "pageview",
    "supportedEntryTypes",
    "fetch",
    "getGlobalName",
    "not_regex",
    "concat",
    "initConfigOverrides",
    "https://",
    "createOffer",
    "response",
    "BATCH_REPORT_PATH",
    "destroy",
    "/monitor_browser/collect/batch/",
    "finalize already called",
    "js",
    "undefined",
    "JS_MD5_NO_NODE_JS",
    "h2",
    "iterator",
    "errors",
    "blocks",
    "beforeSend",
    "createStore",
    "script",
    "requestAnimationFrame",
    "kHttp",
    "sender missing",
    "perf_apdex",
    "createElement",
    "getReportUrl",
    "getEntriesByName",
    "hashed",
    "invalid length/literal",
    "hash",
    "PluginMap",
    "precollect",
    "setStorageUserIdAndDeviceId",
    "event",
    "tagName",
    "effectiveType",
    "defineProperty",
    "pluginBundle",
    "timestamp",
    "get",
    "manual",
    "SDK_VERSION",
    "@O",
    "[object Error]",
    "InjectConfigPlugin",
    "create",
    "Savoye LET",
    "done",
    "InjectEnvPlugin",
    "eq",
    "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    "UnhandledRejection",
    "__SLARDAR_REGISTRY__",
    "-01",
    "getDefaultUserIdAndDeviceId",
    "Gulim",
    "reverseMap",
    "currentScript",
    "defaultConfig missing",
    "session",
    "suffixes",
    "hmac",
    "msToken",
    "n",
    "useLocalConfig",
    "timeout",
    "apiHost",
    "observer",
    "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
    "out",
    "threshold",
    "reason",
    "-",
    "getSubject",
    "getRandomValues",
    "unhandledrejection",
    "resource",
    "GET",
    "lte",
    "error",
    "crossOrigin",
    "load_1",
    "unexpected EOF",
    "entries",
    "decode",
    "1.12.2",
    "getConfig",
    "pluginPathPrefix",
    "size",
    "useBeacon",
    "conditional_sample_rules",
    ".onerror",
    "function",
    "buffer8",
    "encode",
    "ObserveErrorPlugin",
    "WebMssdk ERROR! [5] When slardarConfig.settingLocation is in ",
    "string",
    ", reserved",
    "cookie",
    "action",
    "DEFAULT_IGNORE_PATHS",
    "[object HTMLAllCollection]",
    "weight",
    "custom",
    "initPid",
    "onabort",
    "_data",
    "mmmmmmmmmmlli",
    "dispatchEvent",
    "DEFAULT_SAMPLE_GRANULARITY",
    "candidate",
    "b",
    "sans-serif",
    "h1",
    "transport",
    "include_users",
    "[object PromiseRejectionEvent]",
    "_xex",
    "type",
    "beforeDestroy",
    "lineno",
    "pathname",
    "enable",
    "Sylfaen",
    "remove",
    "childList",
    "72px",
    "[object Undefined]",
    "invalid zip data",
    "&",
    "load",
    "onerror",
    "EV_METHOD_MAP",
    "subscribe",
    "mergeSampleConfig",
    "__esModule",
    ",",
    "origins",
    "crypto",
    "input is invalid type",
    "flush",
    "(cookie|auth|jwt|token|key|ticket|secret|credential|session|password)",
    "appendChild",
    "Playbill",
    "success",
    "performance",
    "reportUrls",
    "i",
    "getOwnPropertyDescriptor",
    "2d",
    "sample_granularity",
    "reduceRight",
    "setConfig",
    "f_view_0",
    " ",
    "js_error",
    "fontFamily",
    "ajax",
    "inner",
    "; path=/;",
    "substring",
    "onload",
    "/log/sentry/",
    "pcErr",
    "ignoreUrls",
    "on",
    "createDefaultConfig",
    "getTime",
    "hex",
    "storageExpires",
    "timing",
    "?bid=",
    "array",
    ", you must configure initConfigOverrides.slardarDomain and initConfigOverrides.slardarPluginPrefixPath",
    "serverTimestamp",
    "toString",
    "dictionary",
    "f",
    "privateSubject",
    "pop",
    "stringify",
    "buildSelfErrorEvent",
    "(bearer|session)",
    "/monitor_web/settings/browser-settings",
    "HEADERS_RECIEVED",
    "test",
    "outerHTML",
    "isArray",
    "JS_MD5_NO_ARRAY_BUFFER",
    ".onunhandledrejection",
    "isBounced",
    "includes",
    "freeze",
    "loadCombinedPlugins",
    "url",
    "sessionId",
    "JS_MD5_NO_WINDOW",
    "op",
    "addedNodes",
    "complete",
    "hostname",
    "loadIndependentPlugins",
    "first",
    "readyState",
    "DEFAULT_SAMPLE_CONFIG",
    "hidden_2",
    "PrecollectPlugin",
    "%27",
    "e",
    "rank",
    "charAt",
    "startTime",
    "set",
    "PerformanceObserver",
    "getDefaultConfig",
    "sendEvent",
    "digest",
    "apply",
    "validateInitConfig",
    "popstate",
    "Headers",
    "initConfigNormalizer",
    "\r\n",
    "match",
    "==",
    "source",
    "history",
    "length",
    "__SLARDAR__REPALCE__HOLDER__",
    "lt",
    "createSender",
    "STORAGE_PREFIX",
    "WebMssdk ERROR! [4] When slardarConfig.settingLocation is in ",
    "DONE",
    "Wingdings",
    "mozRTCPeerConnection",
    "config",
    "map",
    "duration_apdex",
    "removeEventListener",
    "frustrating_threshold",
    "floor",
    "OPTIMA",
    "setOptions",
    "JS_MD5_NO_COMMON_JS",
    "no stream handler",
    "observe",
    "performance_longtask",
    "SETTINGS_PATH",
    "createBrowserClient",
    "AVENIR",
    "invalid UTF-8 data",
    "hashchange",
    "link",
    "setTTWebidV2",
    "build",
    "captureStackTrace",
    "endpoint",
    "entryType",
    "stack",
    "conditional_hit_rules",
    " is not defined",
    ":",
    "random",
    "onReady",
    "sample",
    "globalThis",
    "Meiryo",
    "neq",
    "userId",
    "Jokerman",
    "[object Boolean]",
    "[SDK]",
    "_",
    "xhr_0",
    "Vrinda",
    "getAttribute",
    "arrayBuffer",
    "content-type",
    "error_weight",
    "audio",
    "slardarPluginPrefixPath",
    "info",
    "lastByteIndex",
    "_url",
    "MT Extra",
    "next",
    "push",
    "Content-Type",
    "getStorageKey",
    "settingLocation",
    "__ac_testid",
    "kWebsocket",
    "removeByEvType",
    "localStorage",
    "getSettingsUrl",
    "padStart",
    "height",
    "status",
    "mon16-normal-useast5.tiktokv.us",
    "USER_ID_COOKIE_NAME",
    "interactive",
    "_method",
    "from",
    "charCodeAt",
    "[object Array]",
    "message",
    "bool",
    ".",
    "applyIntegrations",
    "cancelAnimationFrame",
    "target",
    "isSupport",
    "withCredentials",
    "now",
    "MG",
    "update",
    "Observer is closed",
    "LOADING",
    "N@",
    "Request",
    "UNSENT",
    "hidden",
    "exports",
    "device_id",
    "/mssdk/web_common",
    "setTraceHeader",
    "addConfigToReportEvent",
    "autoWrap",
    "applyPlugin",
    "time_spent",
    "init",
    "session_id",
    "iframe",
    "h3",
    "OPENED",
    "https",
    "heatmap",
    "hasSetStorageItem",
    "st",
    "release",
    "mozConnection",
    "enableSlardar",
    "error_count",
    "host",
    "bid",
    "subject",
    "end",
    "view_id",
    "extra field too long",
    "post",
    "versions",
    "open",
    "apdex",
    "getEntries",
    "",
    "sec",
    "invalid distance",
    "sampleRate",
    "h0",
    "onPidUpdate",
    "JS_MD5_NO_BUFFER_FROM",
    "7n",
    "frontierSign",
    "[object DOMException]",
    "boolean",
    "loadPluginsOnPageLoad",
    "navigator",
    "href",
    "passive",
    "/web/report",
    "join",
    "exit",
    "tti",
    "reloadPlugin",
    "duration",
    "already inited",
    "level",
    "p",
    "colno",
    "regex",
    "node",
    "clear",
    "|",
    "assign",
    "start",
    "normalizeInitConfig",
    "register",
    "getEntriesByType",
    "Palatino",
    "hBytes",
    "isTrusted",
    "createConfigManager",
    " is not a function",
    "Buffer",
    "a_count",
    "0",
    "isWebmssdk",
    "MutationObserver",
    "and",
    "clearTimeout",
    "DEFAULT_SENDER_SIZE",
    "getStoreOrConsume",
    "resource_0",
    "onicecandidate",
    "toObservableArray",
    "1",
    "symbol",
    "iceGatheringState",
    "beforeConfig",
    "xmst",
    "deviceId",
    "call",
    "shift",
    "loadNow",
    "key",
    "overrides",
    "filter",
    "[FAILED_TO_STRINGIFY]:",
    "responseText",
    "HEAD",
    "Colonna MT",
    "view_0",
    "onreadystatechange",
    "sendPageview",
    "split",
    "Tunga",
    "extra",
    "DEVICE_ID_COOKIE_NAME",
    "gte",
    "duration_count",
    "slice",
    "Castellar",
    "_mssdk",
    "ConfigException",
    "Aparajita",
    "mon.tiktokv.com",
    "normalizeUserConfig",
    "getElementsByTagName",
    "[object DOMError]",
    "collectBodyOnError",
    "attach",
    "setFilter",
    "SimSun-ExtB",
    "_reqHeaders",
    "enableLazyload",
    "setItem",
    "STYLE",
    "item",
    "SSR",
    "gt",
    "report",
    "fromCharCode",
    "code",
    "addEnvToSendEvent",
    "hit",
    "jsError",
    "serif",
    "getAllResponseHeaders",
    "filename too long",
    "InjectQueryPlugin",
    "abort",
    "WebMssdk ERROR! [1] slardarConfig.settingLocation must be one of ",
    "prototype",
    "setEndpoint",
    "extractUrl",
    "fetchStart",
    "method",
    "Map",
    "Set",
    "MS Outlook",
    "domContentLoadedEventEnd",
    "/web/common",
    "setTTWebid",
    "toLowerCase",
    "catch",
    "[object ErrorEvent]",
    "doesPluginExistInRegistry",
    "initSubject",
    "addEventListener",
    "regionConf",
    "bind",
    "anonymous",
    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
    "min",
    "env",
    "is_bounced",
    "getItem",
    "headers",
    "integrations",
    "=",
    "beforeReport",
    "sendLog",
    "attributes",
    "a",
    "trim",
    "builder",
    "has",
    "send",
    "blankScreen",
    "?",
    "?biz_id=",
    "sendInit",
    "max",
    "application/json",
    "paint",
    "context",
    "img",
    "getSender",
    "Network request failed",
    "//",
    "slardarConfigFromCore",
    "Qg",
    "buffer",
    "onChange",
    "default",
    "setTimeout",
    "[object String]",
    "MYRIAD PRO",
    "RTCPeerConnection",
    "SCRIPT",
    "glueCodeForStorageSecurity",
    "sw",
    "history_0",
    "quota_rate",
    "filterIfPluginDisabled",
    "sharedMemory",
    "parseServerConfig",
    "unsubscribe",
    "provide",
    "invalid InitConfig, init failed",
    "date not in range 1980-2099",
    "err",
    "PerformanceLongTaskTiming",
    "setTTWid",
    "visibilityState",
    "0123456789abcdef",
    "[object Object]",
    "toGMTString",
    "wrapXhr",
    "PLUGIN",
    "body",
    "detail",
    "every",
    "removeChild",
    "resource_error",
    "SDK_SLARDAR_WEB",
    "metrics",
    "pow",
    "offsetWidth",
    "getPrototypeOf",
    "extraExtractor",
    "SDK_NAME",
    "hash_0",
    "Illegal statement",
    "JS_MD5_NO_ARRAY_BUFFER_IS_VIEW",
    "beforeBuild",
    "(?:[^\\n]+?\\n){0,",
    "innerHeight"
]



const parser = require("@babel/parser");
const traverse = require("@babel/traverse").default;
const t = require("@babel/types");
const generate = require("@babel/generator").default;
const beautify = require("js-beautify");
const { readFileSync, writeFile } = require("fs");


aa = [4294967295, 138, 1498001188, 211147047, 253, /\s*\(\)\s*{\s*\[\s*native\s+code\s*]\s*}\s*$/, 203, 288, 9, 1196819126, 3212677781, 135, 263, 193, 58, 18, 244, 2931180889, 240, 173, 268, 2157053261, 261, 175, 14, 5, 171, 270, 156, 258, 13, 15, 3732962506, 185, 169, 2, 6, 132, 162, 200, 3, 160, 217618912, 62, 2517678443, 44, 164, 4, 96, 183, 2903579748, 3863347763, 119, 181, 10, 190, 8, 2654435769, 259, 104, 230, 128, 2633865432, 225, 1, 257, 143, 179, 16, 600974999, 185100057, 32, 188, 53, 2718276124, 177, 196, 4294967296, 147, 117, 17, 49, 7, 28, 12, 266, 216, 11, 0, 45, 166, 247, 1451689750];

function deobfuscate(source) {

  const deobfuscateEncodedStringVisitor = {
    MemberExpression(path) {
        if (path.node && path.node.object &&  path.node.object.name == "Kg") {
            toReplace = giggernigger[path.node.property.value]
            console.log(toReplace)
            path.replaceWith(t.valueToNode(toReplace))
        }

        if (path.node && path.node.object &&  path.node.object.name == "aa") {
            toReplace = aa[path.node.property.value]
            console.log(toReplace)
            path.replaceWith(t.valueToNode(toReplace))
        }
    },
  };

  const ast = parser.parse(source);

  traverse(ast, deobfuscateEncodedStringVisitor);

  let deobfCode = generate(ast, { comments: false }).code;
  deobfCode = beautify(deobfCode, {
    indent_size: 2,
    space_in_empty_paren: true,
  });
  writeCodeToFile(deobfCode);
}

function writeCodeToFile(code) {
  let outputPath = "output.js";
  writeFile(outputPath, code, (err) => {
    if (err) {
      console.log("Error writing file", err);
    } else {
      console.log(`Wrote file to ${outputPath}`);
    }
  });
}

deobfuscate(readFileSync("./vm.js", "utf8"));