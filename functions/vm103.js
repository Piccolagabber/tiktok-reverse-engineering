// 0 PUSH_STRING → stack[0] = "d41d8cd98f00b204e9800998ecf8427e"
// 3 SET_VAR scope[0][4] ← stack[0]
// 6 GET_VAR → stack[0] = scope[0][3]
// 9 PUSH_UNDEFINED → stack[1] = undefined
// 10 STRICT_NOT_EQUAL stack[0] = stack[0] !== stack[1]
// 10 JUMP_IF_FALSE_OR_POP if (stack[0]) POP else JUMP_TO=15
// 13 GET_VAR → stack[0] = scope[0][3]
// 16 PUSH_NULL → stack[1] = null
// 17 STRICT_NOT_EQUAL stack[0] = stack[0] !== stack[1]
// 17 JUMP_IF_FALSE_OR_POP if (stack[0]) POP else JUMP_TO=23
// 20 GET_VAR → stack[0] = scope[0][3]
// 22 PUSH_STRING → stack[1] = ""
// 25 STRICT_NOT_EQUAL stack[0] = stack[0] !== stack[1]
// 25 JUMP_IF_FALSE if (!stack[0]) JUMP_TO=47
// 28 PUSH_UNDEFINED → stack[0] = undefined
// 29 GET_VAR → stack[1] = scope[2][2]
// 32 GET_VAR → stack[2] = scope[0][3]
// 35 CALL func.apply(thisArg, [1 args]) → stack[0]
// 37 SET_VAR scope[0][4] ← stack[0]
// 39 JUMP → JUMP_TO=48
// 42 SET_VAR scope[0][44] ← stack[-1]
// 44 PUSH_STRING → stack[-1] = "ffffffffffffffffffffffffffffffff"
// 47 SET_VAR scope[0][4] ← stack[-1]
// 50 PUSH_UNDEFINED → stack[-1] = undefined
// 51 GET_VAR → stack[0] = scope[2][10]
// 54 CALL func.apply(thisArg, [0 args]) → stack[-1]
// 56 POP stack[-1]
// 57 PUSH_UNDEFINED → stack[-1] = undefined
// 58 GET_VAR → stack[0] = scope[2][5]
// 61 CALL func.apply(thisArg, [0 args]) → stack[-1]
// 63 POP stack[-1]
// 64 GET_VAR → stack[-1] = scope[2][6]
// 66 GET_PROP_NAME stack[-1] ← stack[-1]["ubcode"]
// 69 SET_VAR scope[0][5] ← stack[-1]
// 72 GET_VAR → stack[-1] = scope[2][9]
// 74 GET_PROP_NAME stack[-1] ← stack[-1]["envcode"]
// 77 SET_VAR scope[0][6] ← stack[-1]
// 79 PUSH_CONST → stack[-1] = 2
// 82 SET_VAR scope[0][7] ← stack[-1]
// 85 GET_VAR → stack[-1] = scope[0][7]
// 88 SET_VAR scope[0][8] ← stack[-1]
// 90 PUSH_CONST → stack[-1] = 64
// 93 SET_VAR scope[0][9] ← stack[-1]
// 96 PUSH_UNDEFINED → stack[-1] = undefined
// 97 GET_VAR → stack[0] = scope[2][2]
// 100 GET_VAR → stack[1] = scope[0][2]
// 103 CALL func.apply(thisArg, [1 args]) → stack[-1]
// 105 SET_VAR scope[0][10] ← stack[-1]
// 108 GET_VAR → stack[-1] = scope[2][3]
// 111 DUP → stack[0] = stack[-1]
// 111 GET_PROP_NAME stack[0] ← stack[0]["decode"]
// 114 PUSH_UNDEFINED → stack[1] = undefined
// 115 GET_VAR → stack[2] = scope[2][2]
// 118 GET_VAR → stack[3] = scope[2][3]
// 121 DUP → stack[4] = stack[3]
// 121 GET_PROP_NAME stack[4] ← stack[4]["decode"]
// 124 GET_VAR → stack[5] = scope[0][10]
// 127 CALL func.apply(thisArg, [1 args]) → stack[3]
// 129 CALL func.apply(thisArg, [1 args]) → stack[1]
// 131 CALL func.apply(thisArg, [1 args]) → stack[-1]
// 133 SET_VAR scope[0][11] ← stack[-1]
// 136 GET_VAR → stack[-1] = scope[2][3]
// 139 DUP → stack[0] = stack[-1]
// 139 GET_PROP_NAME stack[0] ← stack[0]["decode"]
// 142 PUSH_UNDEFINED → stack[1] = undefined
// 143 GET_VAR → stack[2] = scope[2][2]
// 146 GET_VAR → stack[3] = scope[2][3]
// 149 DUP → stack[4] = stack[3]
// 149 GET_PROP_NAME stack[4] ← stack[4]["decode"]
// 152 GET_VAR → stack[5] = scope[0][4]
// 155 CALL func.apply(thisArg, [1 args]) → stack[3]
// 157 CALL func.apply(thisArg, [1 args]) → stack[1]
// 159 CALL func.apply(thisArg, [1 args]) → stack[-1]
// 161 SET_VAR scope[0][12] ← stack[-1]
// 163 GET_GLOBAL → stack[-1] = navigator
// 165 GET_PROP_NAME stack[-1] ← stack[-1]["userAgent"]
// 168 SET_VAR scope[0][13] ← stack[-1]
// 171 PUSH_UNDEFINED → stack[-1] = undefined
// 172 GET_VAR → stack[0] = scope[1][2]
// 175 GET_VAR → stack[1] = scope[0][6]
// 178 GET_VAR → stack[2] = scope[0][5]
// 181 CALL func.apply(thisArg, [2 args]) → stack[-1]
// 183 SET_VAR scope[0][14] ← stack[-1]
// 186 PUSH_UNDEFINED → stack[-1] = undefined
// 187 GET_VAR → stack[0] = scope[2][8]
// 190 GET_VAR → stack[1] = scope[0][14]
// 193 GET_VAR → stack[2] = scope[0][13]
// 196 CALL func.apply(thisArg, [2 args]) → stack[-1]
// 198 SET_VAR scope[0][15] ← stack[-1]
// 201 PUSH_UNDEFINED → stack[-1] = undefined
// 202 GET_VAR → stack[0] = scope[1][5]
// 205 GET_VAR → stack[1] = scope[0][15]
// 207 PUSH_STRING → stack[2] = "s0"
// 210 CALL func.apply(thisArg, [2 args]) → stack[-1]
// 212 SET_VAR scope[0][16] ← stack[-1]
// 215 GET_VAR → stack[-1] = scope[2][3]
// 218 DUP → stack[0] = stack[-1]
// 218 GET_PROP_NAME stack[0] ← stack[0]["decode"]
// 221 PUSH_UNDEFINED → stack[1] = undefined
// 222 GET_VAR → stack[2] = scope[2][2]
// 225 GET_VAR → stack[3] = scope[0][16]
// 228 CALL func.apply(thisArg, [1 args]) → stack[1]
// 230 CALL func.apply(thisArg, [1 args]) → stack[-1]
// 232 SET_VAR scope[0][17] ← stack[-1]
// 234 GET_GLOBAL → stack[-1] = Date
// 237 FUNCTION_BIND_APPLY → stack[-1] = new stack[-1](0 args)
// 239 DUP → stack[0] = stack[-1]
// 239 GET_PROP_NAME stack[0] ← stack[0]["getTime"]
// 242 CALL func.apply(thisArg, [0 args]) → stack[-1]
// 243 PUSH_CONST → stack[0] = 1000
// 246 DIV stack[-1] = stack[-1] / stack[0]
// 247 SET_VAR scope[0][18] ← stack[-1]
// 250 PUSH_UNDEFINED → stack[-1] = undefined
// 251 GET_VAR → stack[0] = scope[2][4]
// 254 GET_VAR → stack[1] = scope[2][1]
// 256 GET_PROP_NAME stack[1] ← stack[1]["perf"]
// 259 CALL func.apply(thisArg, [1 args]) → stack[-1]
// 260 GET_PROP_NAME stack[-1] ← stack[-1]["data"]
// 263 SET_VAR scope[0][19] ← stack[-1]
// 266 GET_VAR → stack[-1] = scope[0][9]
// 269 SET_VAR scope[0][20] ← stack[-1]
// 272 GET_VAR → stack[-1] = scope[0][6]
// 274 PUSH_CONST → stack[0] = 256
// 277 DIV stack[-1] = stack[-1] / stack[0]
// 278 SET_VAR scope[0][21] ← stack[-1]
// 281 GET_VAR → stack[-1] = scope[0][6]
// 283 PUSH_CONST → stack[0] = 256
// 286 MOD stack[-1] = stack[-1] % stack[0]
// 287 SET_VAR scope[0][22] ← stack[-1]
// 290 GET_VAR → stack[-1] = scope[0][5]
// 293 SET_VAR scope[0][23] ← stack[-1]
// 296 GET_VAR → stack[-1] = scope[0][11]
// 298 GET_PROP_NAME stack[-1] ← stack[-1]["14"]
// 301 SET_VAR scope[0][24] ← stack[-1]
// 304 GET_VAR → stack[-1] = scope[0][11]
// 306 GET_PROP_NAME stack[-1] ← stack[-1]["15"]
// 309 SET_VAR scope[0][25] ← stack[-1]
// 312 GET_VAR → stack[-1] = scope[0][12]
// 314 GET_PROP_NAME stack[-1] ← stack[-1]["14"]
// 317 SET_VAR scope[0][26] ← stack[-1]
// 320 GET_VAR → stack[-1] = scope[0][12]
// 322 GET_PROP_NAME stack[-1] ← stack[-1]["15"]
// 325 SET_VAR scope[0][27] ← stack[-1]
// 328 GET_VAR → stack[-1] = scope[0][17]
// 330 GET_PROP_NAME stack[-1] ← stack[-1]["14"]
// 333 SET_VAR scope[0][28] ← stack[-1]
// 336 GET_VAR → stack[-1] = scope[0][17]
// 338 GET_PROP_NAME stack[-1] ← stack[-1]["15"]
// 341 SET_VAR scope[0][29] ← stack[-1]
// 344 GET_VAR → stack[-1] = scope[0][18]
// 346 PUSH_CONST → stack[0] = 24
// 349 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 349 PUSH_CONST → stack[0] = 255
// 352 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 353 SET_VAR scope[0][30] ← stack[-1]
// 356 GET_VAR → stack[-1] = scope[0][18]
// 358 PUSH_CONST → stack[0] = 16
// 361 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 361 PUSH_CONST → stack[0] = 255
// 364 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 365 SET_VAR scope[0][31] ← stack[-1]
// 368 GET_VAR → stack[-1] = scope[0][18]
// 370 PUSH_CONST → stack[0] = 8
// 373 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 373 PUSH_CONST → stack[0] = 255
// 376 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 377 SET_VAR scope[0][32] ← stack[-1]
// 380 GET_VAR → stack[-1] = scope[0][18]
// 382 PUSH_CONST → stack[0] = 0
// 385 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 385 PUSH_CONST → stack[0] = 255
// 388 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 389 SET_VAR scope[0][33] ← stack[-1]
// 392 GET_VAR → stack[-1] = scope[0][19]
// 394 PUSH_CONST → stack[0] = 24
// 397 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 397 PUSH_CONST → stack[0] = 255
// 400 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 401 SET_VAR scope[0][34] ← stack[-1]
// 404 GET_VAR → stack[-1] = scope[0][19]
// 406 PUSH_CONST → stack[0] = 16
// 409 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 409 PUSH_CONST → stack[0] = 255
// 412 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 413 SET_VAR scope[0][35] ← stack[-1]
// 416 GET_VAR → stack[-1] = scope[0][19]
// 418 PUSH_CONST → stack[0] = 8
// 421 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 421 PUSH_CONST → stack[0] = 255
// 424 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 425 SET_VAR scope[0][36] ← stack[-1]
// 428 GET_VAR → stack[-1] = scope[0][19]
// 430 PUSH_CONST → stack[0] = 0
// 433 RIGHT_SHIFT stack[-1] = stack[-1] >> stack[0]
// 433 PUSH_CONST → stack[0] = 255
// 436 BITWISE_AND stack[-1] = stack[-1] & stack[0]
// 437 SET_VAR scope[0][37] ← stack[-1]
// 440 GET_VAR → stack[-1] = scope[0][20]
// 443 GET_VAR → stack[0] = scope[0][21]
// 446 XOR stack[-1] = stack[-1] ^ stack[0]
// 447 GET_VAR → stack[0] = scope[0][22]
// 450 XOR stack[-1] = stack[-1] ^ stack[0]
// 451 GET_VAR → stack[0] = scope[0][23]
// 454 XOR stack[-1] = stack[-1] ^ stack[0]
// 455 GET_VAR → stack[0] = scope[0][24]
// 458 XOR stack[-1] = stack[-1] ^ stack[0]
// 459 GET_VAR → stack[0] = scope[0][25]
// 462 XOR stack[-1] = stack[-1] ^ stack[0]
// 463 GET_VAR → stack[0] = scope[0][26]
// 466 XOR stack[-1] = stack[-1] ^ stack[0]
// 467 GET_VAR → stack[0] = scope[0][27]
// 470 XOR stack[-1] = stack[-1] ^ stack[0]
// 471 GET_VAR → stack[0] = scope[0][28]
// 474 XOR stack[-1] = stack[-1] ^ stack[0]
// 475 GET_VAR → stack[0] = scope[0][29]
// 478 XOR stack[-1] = stack[-1] ^ stack[0]
// 479 GET_VAR → stack[0] = scope[0][30]
// 482 XOR stack[-1] = stack[-1] ^ stack[0]
// 483 GET_VAR → stack[0] = scope[0][31]
// 486 XOR stack[-1] = stack[-1] ^ stack[0]
// 487 GET_VAR → stack[0] = scope[0][32]
// 490 XOR stack[-1] = stack[-1] ^ stack[0]
// 491 GET_VAR → stack[0] = scope[0][33]
// 494 XOR stack[-1] = stack[-1] ^ stack[0]
// 495 GET_VAR → stack[0] = scope[0][34]
// 498 XOR stack[-1] = stack[-1] ^ stack[0]
// 499 GET_VAR → stack[0] = scope[0][35]
// 502 XOR stack[-1] = stack[-1] ^ stack[0]
// 503 GET_VAR → stack[0] = scope[0][36]
// 506 XOR stack[-1] = stack[-1] ^ stack[0]
// 507 GET_VAR → stack[0] = scope[0][37]
// 510 XOR stack[-1] = stack[-1] ^ stack[0]
// 511 SET_VAR scope[0][38] ← stack[-1]
// 513 PUSH_CONST → stack[-1] = 255
// 516 SET_VAR scope[0][39] ← stack[-1]
// 519 PUSH_UNDEFINED → stack[-1] = undefined
// 520 GET_VAR → stack[0] = scope[1][6]
// 523 GET_VAR → stack[1] = scope[0][20]
// 526 GET_VAR → stack[2] = scope[0][22]
// 529 GET_VAR → stack[3] = scope[0][24]
// 532 GET_VAR → stack[4] = scope[0][26]
// 535 GET_VAR → stack[5] = scope[0][28]
// 538 GET_VAR → stack[6] = scope[0][30]
// 541 GET_VAR → stack[7] = scope[0][32]
// 544 GET_VAR → stack[8] = scope[0][34]
// 547 GET_VAR → stack[9] = scope[0][36]
// 550 GET_VAR → stack[10] = scope[0][38]
// 553 GET_VAR → stack[11] = scope[0][21]
// 556 GET_VAR → stack[12] = scope[0][23]
// 559 GET_VAR → stack[13] = scope[0][25]
// 562 GET_VAR → stack[14] = scope[0][27]
// 565 GET_VAR → stack[15] = scope[0][29]
// 568 GET_VAR → stack[16] = scope[0][31]
// 571 GET_VAR → stack[17] = scope[0][33]
// 574 GET_VAR → stack[18] = scope[0][35]
// 577 GET_VAR → stack[19] = scope[0][37]
// 580 CALL func.apply(thisArg, [19 args]) → stack[-1]
// 582 SET_VAR scope[0][40] ← stack[-1]
// 585 PUSH_UNDEFINED → stack[-1] = undefined
// 586 GET_VAR → stack[0] = scope[2][8]
// 589 PUSH_UNDEFINED → stack[1] = undefined
// 590 GET_VAR → stack[2] = scope[1][3]
// 593 GET_VAR → stack[3] = scope[0][39]
// 596 CALL func.apply(thisArg, [1 args]) → stack[1]
// 598 GET_VAR → stack[2] = scope[0][40]
// 601 CALL func.apply(thisArg, [2 args]) → stack[-1]
// 603 SET_VAR scope[0][41] ← stack[-1]
// 606 PUSH_UNDEFINED → stack[-1] = undefined
// 607 GET_VAR → stack[0] = scope[1][4]
// 610 GET_VAR → stack[1] = scope[0][8]
// 613 GET_VAR → stack[2] = scope[0][39]
// 616 GET_VAR → stack[3] = scope[0][41]
// 619 CALL func.apply(thisArg, [3 args]) → stack[-1]
// 621 SET_VAR scope[0][42] ← stack[-1]
// 624 PUSH_UNDEFINED → stack[-1] = undefined
// 625 GET_VAR → stack[0] = scope[2][7]
// 628 GET_VAR → stack[1] = scope[0][42]
// 630 PUSH_STRING → stack[2] = "s2"
// 633 CALL func.apply(thisArg, [2 args]) → stack[-1]
// 635 SET_VAR scope[0][43] ← stack[-1]
// 638 GET_VAR → stack[-1] = scope[0][43]
// 641 RETURN stack[-1]
